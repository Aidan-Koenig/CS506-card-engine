image: node:latest

stages:
  - build
  - test
  - docker-build

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - frontend/node_modules/

build-frontend:
  stage: build
  script:
    - cd frontend
    - npm ci
    - npm run build
  artifacts:
    paths:
    - frontend/dist
    expire_in: 1 week
  rules:
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"

test-frontend:
  stage: test
  script:
    - cd frontend
    - npm ci
    - npm run test
  rules:
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"

build-backend:
  stage: build
  image: openjdk:18-jdk-alpine
  script:
    - cd backend
    - ./gradlew assemble
  artifacts:
    paths:
      - backend/build/libs/*.jar
    expire_in: 1 week
  rules:
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"

build-docker-images:
  stage: docker-build
  image: docker:stable
  services:
    - docker:dind
  script:
    - docker build ./frontend/. -t euchre-frontend
    - docker build ./backend/. -t euchre-backend
  rules:
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"

# backend_test:
#   stage: test
#   script:
#     - cd database
#     - docker compose -f backend_test.yml up -d --build
#     - sleep 30  # Wait for tests to complete
#     - docker logs backend_test_backend_1 > logs.txt  # Capture logs from the "backend" service
#     - grep -q "BUILD SUCCESSFUL" logs.txt  # Check for "BUILD SUCCESSFUL" in logs
#   after_script:
#     - cd database
#     - docker compose -f backend_test.yml down  # Stop and remove containers